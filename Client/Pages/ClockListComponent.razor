@inject ClockService ClockService

@foreach (var clock in this.Clocks)
{
    <div @key="clock.Id" class="clock">
        <div class="name">
            <span class="value">@clock.Name</span>
        </div>
        <div class="current-time">
            <span class="value">@clock.GetCurrentTime().ToString("MM/dd HH:mm:ss")</span>
        </div>
        <div class="time-zone">
            <span class="caption">タイムゾーン</span>
            <span class="value">@clock.TimeZoneId</span>
        </div>
    </div>
}

<div class="clock form">
    <EditForm Model="this.NewClock" OnValidSubmit="OnOK">
        <DataAnnotationsValidator />
        <div class="name">
            <span class="caption">表示名</span>
            <span class="input-field">
                <input type="text" @bind="this.NewClock.Name" autofocus />
            </span>
        </div>
        <div class="time-zone">
            <span class="caption">タイムゾーン</span>
            <span class="input-field">
                <select @bind="this.NewClock.TimeZoneId">
                    @foreach (var zone in TimeZoneInfo.GetSystemTimeZones())
                    {
                        <option value="@zone.Id">@zone</option>
                    }
                </select>
            </span>
        </div>
        <div class="error-message">
            <ValidationSummary></ValidationSummary>
        </div>
        <div class="actions">
            <button class="button">OK</button>
        </div>
    </EditForm>
</div>

@code
{
    private IEnumerable<Clock> Clocks = Enumerable.Empty<Clock>();

    private Clock NewClock = new();

    protected override async Task OnInitializedAsync()
    {
        this.Clocks = await this.ClockService.GetClocksAsync();
    }

    private async Task OnOK()
    {
        await this.ClockService.AddClockAsync(this.NewClock);
        this.NewClock = new();
    }
}
