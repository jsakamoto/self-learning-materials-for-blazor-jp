@inject IJSRuntime JSRuntime

<div class="clock form">
    <EditForm Model="this.Item" OnValidSubmit="OnOK">
        <DataAnnotationsValidator />
        <div class="name">
            <span class="caption">表示名</span>
            <span class="input-field">
                <input type="text" @bind="this.Item.Name" autofocus />
            </span>
        </div>
        <div class="time-zone">
            <span class="caption">タイムゾーン</span>
            <span class="input-field">
                <select @bind="this.Item.TimeZoneId">
                    @foreach (var zone in TimeZoneInfo.GetSystemTimeZones())
                    {
                        <option value="@zone.Id">@zone</option>
                    }
                </select>
            </span>
        </div>
        <div class="error-message">
            <ValidationSummary></ValidationSummary>
        </div>
        <div class="actions">
            @if (this.OnClickDelete.HasDelegate)
            {
                <button class="button delete-button" type="button" @onclick="this.OnDelete">削除</button>
            }
            <button class="button">OK</button>
            <a class="button" href="./">キャンセル</a>
        </div>
    </EditForm>
</div>

@code
{
    [Parameter]
    public Clock Item { get; set; } = new();

    [Parameter]
    public EventCallback<Clock> OnClickOK { get; set; }

    [Parameter]
    public EventCallback OnClickDelete { get; set; }

    private async Task OnOK()
    {
        await this.OnClickOK.InvokeAsync(this.Item);
    }

    private async Task OnDelete()
    {
        var yes = await this.JSRuntime.InvokeAsync<bool>("confirm", "削除してもよろしいですか?");
        if (yes)
        {
            await this.OnClickDelete.InvokeAsync();
        }
    }
}